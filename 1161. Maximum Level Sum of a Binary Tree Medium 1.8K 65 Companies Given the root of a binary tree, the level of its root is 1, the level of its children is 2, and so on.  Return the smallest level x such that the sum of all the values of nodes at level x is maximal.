/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        if(root.left == null && root.right == null) return 1;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int maxSum = Integer.MIN_VALUE;
        int currLevel =0;
        int maxSumLevel = 0;
    while(!q.isEmpty()){
        currLevel++;
        int sum = 0;
        int size = q.size();    //first we store q size so at first level it has one root we already added
        for(int i = 0 ; i < size ; i++ ){
           TreeNode node = q.remove();
           sum+=node.val;
           if(node.left != null)    q.add(node.left);
           if(node.right != null)   q.add(node.right);
        } if(sum > maxSum){
            maxSumLevel = currLevel;
            maxSum = sum;
        }
    }
    return maxSumLevel;
    }
}
